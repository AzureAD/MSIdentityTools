# Continuous Integration Pipeline
# https://aka.ms/yaml

parameters:
- name: vmImage
  displayName: 'Pool Image'
  type: string
  default: 'ubuntu-latest'
  values:
  - windows-latest
  - ubuntu-latest
  - macOS-latest

trigger:
  batch: true
  branches:
    include:
    - main
    - preview
  paths:
    include:
    - src/*

#pr: none

variables:
  vmImage: '${{ parameters.vmImage }}'
  #moduleName: 'MSIdentityTools'
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    prereleaseTag: 
  ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
    prereleaseTag: 'preview'
  artifactModule: 'PSModule'

pool:
  vmImage: $(vmImage)

stages:
- stage: Build
  jobs: 
  - job: Prepare
    variables:
      skipComponentGovernanceDetection: true
      runCodesignValidationInjection: false
    steps:
    - task: PowerShell@2
      name: ModuleInfo
      displayName: 'Get Parameters for PowerShell Module'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build/Get-PSModuleInfo.ps1'
        arguments: '-ModuleManifestPath "$(Build.SourcesDirectory)/src/*.psd1" -TrimVersionDepth 2'
        pwsh: true

  - job: Build
    dependsOn: Prepare
    variables: 
      runCodesignValidationInjection: false
      moduleNameSrc: '$[ dependencies.Prepare.outputs[''ModuleInfo.moduleName''] ]'
      moduleVersionSrc: '$[ coalesce(dependencies.Prepare.outputs[''ModuleInfo.moduleVersionTrimmed''], dependencies.Prepare.outputs[''ModuleInfo.moduleVersion'']) ]'
      moduleVersion.Revision: '$[ counter(variables[''moduleVersionSrc''], 0) ]'
      moduleVersion: '$[ coalesce(variables[''moduleVersionOverride''], format(''{0}.{1}'', variables[''moduleVersionSrc''], variables[''moduleVersion.Revision''])) ]'
    steps:
    - template: template-psmodule-build.yml
      parameters:
        moduleName: '$(moduleNameSrc)'
        moduleVersion: '$(moduleVersion)'
        prereleaseTag: '$(prereleaseTag)'

- stage: Test
  dependsOn: Build
  jobs: 
  - job: Windows
    variables: 
      skipComponentGovernanceDetection: true
      runCodesignValidationInjection: false
    pool:
      vmImage: 'windows-latest'
    steps:
    - download: current
      artifact: '$(artifactModule)'
    - task: PowerShell@2
      name: ModuleInfo
      displayName: 'Get Parameters for PowerShell Module'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build/Get-PSModuleInfo.ps1'
        arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/$(artifactModule)/*/*.psd1"'
        pwsh: true
    - template: template-psmodule-test.yml
      parameters:
        moduleName: '$(ModuleInfo.moduleName)'
        pesterConfigurationName: 'CI'
        testWindowsPowershell: true

  - job: Ubuntu
    variables: 
      skipComponentGovernanceDetection: true
      runCodesignValidationInjection: false
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - download: current
      artifact: '$(artifactModule)'
    - task: PowerShell@2
      name: ModuleInfo
      displayName: 'Get Parameters for PowerShell Module'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build/Get-PSModuleInfo.ps1'
        arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/$(artifactModule)/*/*.psd1"'
        pwsh: true
    - template: template-psmodule-test.yml
      parameters:
        moduleName: '$(ModuleInfo.moduleName)'
        pesterConfigurationName: 'CI'

  - job: MacOS
    variables: 
      skipComponentGovernanceDetection: true
      runCodesignValidationInjection: false
    pool:
      vmImage: 'macOS-latest'
    steps:
    - download: current
      artifact: '$(artifactModule)'
    - task: PowerShell@2
      name: ModuleInfo
      displayName: 'Get Parameters for PowerShell Module'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build/Get-PSModuleInfo.ps1'
        arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/$(artifactModule)/*/*.psd1"'
        pwsh: true
    - template: template-psmodule-test.yml
      parameters:
        moduleName: '$(ModuleInfo.moduleName)'
        pesterConfigurationName: 'CI'
