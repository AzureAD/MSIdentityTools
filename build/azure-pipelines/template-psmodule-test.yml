# PowerShell Module Test Pipeline Template
# https://aka.ms/yaml

parameters:
- name: moduleName
  type: string
  default:
- name: pipelineId
  type: string
  default:
- name: artifactInput
  type: string
  default: 'PSModule'
- name: artifactOutput
  type: string
  default: 'PSModuleTestResults'

steps:
- pwsh: |
    $ModuleManifest = Import-PowerShellDataFile (Join-Path $env:ModuleDirectory '*.psd1')
    $LockFileContent = [pscustomobject]@{ RequiredModules = $PSModuleData.RequiredModules; ExternalModuleDependencies = $PSModuleData.PrivateData.PSData.ExternalModuleDependencies } | ConvertTo-Json -Compress -Depth 2
    Set-Content $env:LockFilePath -Value $LockFileContent
  displayName: 'Generate PSModule Dependencies Lock File'
  env:
    ModuleDirectory: '$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}'
    LockFilePath: '$(Pipeline.Workspace)/PSModuleDependencies.lock.json'

- task: Cache@2
  displayName: 'Cache PSModule Dependencies'
  inputs:
    key:  PSModuleDependencies | $(Pipeline.Workspace)/PSModuleDependencies.lock.json
    path: "$(Pipeline.Workspace)/PSModuleCache"
    cacheHitVar: PSModuleDependencies_IsCached

- task: PowerShell@2
  displayName: 'Restore PSModule Dependencies'
  condition: and(succeeded(), ne(variables.PSModuleDependencies_IsCached, 'true'))
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/build/Restore-PSModuleDependencies.ps1'
    arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}" -PSModuleCacheDirectory "$(Pipeline.Workspace)/PSModuleCache"'
    pwsh: true

- task: PowerShell@2
  displayName: 'Test PowerShell Module'
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/build/Test-PSModule.ps1'
    arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}" -PSModuleCacheDirectory "$(Pipeline.Workspace)/PSModuleCache" -PesterConfigurationPath "$(System.DefaultWorkingDirectory)/build/PesterConfiguration.Pipeline.psd1"'
    pwsh: true

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/TestResults/CodeCoverage.xml'
    pathToSources: '$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '$(System.DefaultWorkingDirectory)/build/TestResults/TestResults.xml'
    testRunTitle: 'Unit Tests'
    buildPlatform: '$(Agent.OS)_$(Agent.OSArchitecture)'
    buildConfiguration: 'PowerShell Core'
    failTaskOnFailedTests: true

- task: PublishPipelineArtifact@1
  displayName: 'Publish PowerShell Module Test Results'
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/build/TestResults'
    artifact: '${{ parameters.artifactOutput }}'
    publishLocation: 'pipeline'

- ${{ if eq(variables.Agent.OS, 'Windows_NT') }}:
  - task: PowerShell@2
    displayName: 'Test PowerShell Module'
    inputs:
      filePath: '$(System.DefaultWorkingDirectory)/build/Test-PSModule.ps1'
      arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}" -PSModuleCacheDirectory "$(Pipeline.Workspace)/PSModuleCache" -PesterConfigurationPath "$(System.DefaultWorkingDirectory)/build/PesterConfiguration.Pipeline.psd1"'
      pwsh: false

  # - task: PublishCodeCoverageResults@1
  #   inputs:
  #     codeCoverageTool: 'JaCoCo'
  #     summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/TestResults/CodeCoverage.xml'
  #     pathToSources: '$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(System.DefaultWorkingDirectory)/build/TestResults/TestResults.xml'
      testRunTitle: 'Unit Tests'
      buildPlatform: '$(Agent.OS)_$(Agent.OSArchitecture)'
      buildConfiguration: 'PowerShell Core'
      failTaskOnFailedTests: false

  # - task: PublishPipelineArtifact@1
  #   displayName: 'Publish PowerShell Module Test Results'
  #   inputs:
  #     targetPath: '$(System.DefaultWorkingDirectory)/build/TestResults'
  #     artifact: '${{ parameters.artifactOutput }}'
  #     publishLocation: 'pipeline'
