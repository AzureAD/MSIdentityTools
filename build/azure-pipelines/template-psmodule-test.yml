# PowerShell Module Test Pipeline Template
# https://aka.ms/yaml

parameters:
- name: moduleName
  type: string
  default:
- name: pipelineId
  type: string
  default:
- name: artifactInput
  type: string
  default: 'PSModule'
- name: artifactOutput
  type: string
  default: 'PSModuleTestResults'
- name: PesterConfigurationName
  type: string
  default: 'Pipeline'
- name: TestWindowsPowershell
  type: boolean
  default: false

steps:
- pwsh: |
    $ModuleManifest = Import-PowerShellDataFile (Join-Path $env:ModuleDirectory '*.psd1')
    $LockFileContent = [pscustomobject]@{ RequiredModules = $ModuleManifest.RequiredModules; ExternalModuleDependencies = $ModuleManifest.PrivateData.PSData.ExternalModuleDependencies } | ConvertTo-Json -Compress -Depth 2
    Set-Content $env:LockFilePath -Value $LockFileContent
  displayName: 'Generate PSModule Dependencies Lock File'
  env:
    ModuleDirectory: '$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}'
    LockFilePath: '$(Pipeline.Workspace)/PSModuleDependencies.lock.json'

- task: Cache@2
  displayName: 'Cache PSModule Dependencies'
  inputs:
    key:  PSModuleDependencies | $(Pipeline.Workspace)/PSModuleDependencies.lock.json
    path: "$(Pipeline.Workspace)/PSModuleCache"
    cacheHitVar: PSModuleDependencies_IsCached

- task: PowerShell@2
  displayName: 'Restore PSModule Dependencies'
  condition: 'and(succeeded(), variables[''PSModuleDependencies_IsCached''])'
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/build/Restore-PSModuleDependencies.ps1'
    arguments: >
      -ModuleManifestPath "$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}"
      -PSModuleCacheDirectory "$(Pipeline.Workspace)/PSModuleCache"
    pwsh: true

- task: PowerShell@2
  displayName: 'Test PSModule'
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/build/Test-PSModule.ps1'
    arguments: >
      -ModuleManifestPath "$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}"
      -PSModuleCacheDirectory "$(Pipeline.Workspace)/PSModuleCache"
      -PesterConfigurationPath "$(System.DefaultWorkingDirectory)/build/PesterConfiguration.${{ parameters.PesterConfigurationName }}.psd1"
      -TestResultPath "$(Common.TestResultsDirectory)/TestResult_$(Agent.OS)_$(Agent.OSArchitecture)_PowerShellCore_$(Build.BuildId).xml"
      -CodeCoveragePath "$(Common.TestResultsDirectory)/CodeCoverage_$(Agent.OS)_$(Agent.OSArchitecture)_PowerShellCore_$(Build.BuildId).xml"
    pwsh: true

- task: PublishTestResults@2
  displayName: 'Publish PSModule Test Results'
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '$(Common.TestResultsDirectory)/TestResult_$(Agent.OS)_$(Agent.OSArchitecture)_PowerShellCore_$(Build.BuildId).xml'
    testRunTitle: '$(Agent.OS)_$(Agent.OSArchitecture)_PowerShellCore_$(Build.BuildId)'
    buildPlatform: '$(Agent.OSArchitecture)'
    failTaskOnFailedTests: true

- task: PublishCodeCoverageResults@1
  displayName: 'Publish PSModule Code Coverage Results'
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '$(Common.TestResultsDirectory)/CodeCoverage_$(Agent.OS)_$(Agent.OSArchitecture)_PowerShellCore_$(Build.BuildId).xml'
    pathToSources: '$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}'

- ${{ if eq(parameters.TestWindowsPowershell, true) }}:
  - task: PowerShell@2
    displayName: 'Test PSModule on Windows PowerShell'
    condition: 'and(succeeded(), eq(variables[''Agent.OS''], ''Windows_NT''))'
    inputs:
      filePath: '$(System.DefaultWorkingDirectory)/build/Test-PSModule.ps1'
      arguments: >
        -ModuleManifestPath "$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}"
        -PSModuleCacheDirectory "$(Pipeline.Workspace)/PSModuleCache"
        -PesterConfigurationPath "$(System.DefaultWorkingDirectory)/build/PesterConfiguration.${{ parameters.PesterConfigurationName }}.psd1"
        -TestResultPath "$(Common.TestResultsDirectory)/TestResult_$(Agent.OS)_$(Agent.OSArchitecture)_WindowsPowerShell_$(Build.BuildId).xml"
        -CodeCoveragePath "$(Common.TestResultsDirectory)/CodeCoverage_$(Agent.OS)_$(Agent.OSArchitecture)_WindowsPowerShell_$(Build.BuildId).xml"
      pwsh: false

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish PSModule Code Coverage Results on Windows PowerShell'
    condition: 'and(succeeded(), eq(variables[''Agent.OS''], ''Windows_NT''))'
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: '$(Common.TestResultsDirectory)/CodeCoverage_$(Agent.OS)_$(Agent.OSArchitecture)_WindowsPowerShell_$(Build.BuildId).xml'
      pathToSources: '$(Pipeline.Workspace)/${{ parameters.pipelineId }}/${{ parameters.artifactInput }}/${{ parameters.moduleName }}'

  - task: PublishTestResults@2
    displayName: 'Publish PSModule Test Results on Windows PowerShell'
    condition: 'and(succeeded(), eq(variables[''Agent.OS''], ''Windows_NT''))'
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(Common.TestResultsDirectory)/TestResult_$(Agent.OS)_$(Agent.OSArchitecture)_WindowsPowerShell_$(Build.BuildId).xml'
      testRunTitle: '$(Agent.OS)_$(Agent.OSArchitecture)_WindowsPowerShell_$(Build.BuildId)'
      buildPlatform: '$(Agent.OSArchitecture)'
      failTaskOnFailedTests: false

- task: PublishPipelineArtifact@1
  displayName: 'Publish PSModule Test Results'
  inputs:
    targetPath: '$(Common.TestResultsDirectory)'
    artifact: '${{ parameters.artifactOutput }}_$(Agent.OS)_$(Agent.OSArchitecture)'
    publishLocation: 'pipeline'
